# This file allows users to call find_package(XBLANG) and pick up our targets.

@XBLANG_CONFIG_CODE@

set(LLVM_VERSION @LLVM_VERSION_MAJOR@.@LLVM_VERSION_MINOR@.@LLVM_VERSION_PATCH@)
find_package(
  LLVM
  ${LLVM_VERSION}
  EXACT
  REQUIRED
  CONFIG
  HINTS
  "@XBLANG_CONFIG_LLVM_CMAKE_DIR@"
)

set(XBLANG_EXPORTED_TARGETS "@XBLANG_EXPORTS@")
set(XBLANG_CMAKE_DIR "@XBLANG_CONFIG_CMAKE_DIR@")
set(XBLANG_INCLUDE_DIRS "@XBLANG_CONFIG_INCLUDE_DIRS@")
set(XBLANG_TABLEGEN_EXE "@XBLANG_CONFIG_TABLEGEN_EXE@")
set(XBLANG_INSTALL_AGGREGATE_OBJECTS "@XBLANG_INSTALL_AGGREGATE_OBJECTS@")
set(XBLANG_ENABLE_BINDINGS_PYTHON "@XBLANG_ENABLE_BINDINGS_PYTHON@")
set(XBLANG_ENABLE_EXECUTION_ENGINE "@XBLANG_ENABLE_EXECUTION_ENGINE@")

# For xblang_tablegen()
set(XBLANG_INCLUDE_DIR "@XBLANG_INCLUDE_DIR@")
set(XBLANG_MAIN_SRC_DIR "@XBLANG_MAIN_SRC_DIR@")

set_property(GLOBAL PROPERTY XBLANG_ALL_LIBS "@XBLANG_ALL_LIBS@")

# Provide all our library targets to users. More specifically, configure XBLANG
# so that it can be directly included in a top level CMakeLists.txt, but also so
# that it can be imported via `find_package`. This is based on how LLVM handles
# exports.
if(NOT TARGET XBLANGSupport)
  @XBLANG_CONFIG_INCLUDE_EXPORTS@
endif()

# By creating these targets here, subprojects that depend on XBLANG's
# tablegen-generated headers can always depend on these targets whether building
# in-tree with XBLANG or not.
if(NOT TARGET xblang-tablegen-targets)
  add_custom_target(xblang-tablegen-targets)
endif()
if(NOT TARGET xblang-headers)
  add_custom_target(xblang-headers)
endif()
if(NOT TARGET xblang-generic-headers)
  add_custom_target(xblang-generic-headers)
endif()
if(NOT TARGET xblang-doc)
  add_custom_target(xblang-doc)
endif()
